<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>技术 on Cogito, ergo sum</title><link>https://winsphinx.github.io/blog/categories/%E6%8A%80%E6%9C%AF/</link><description>Recent content in 技术 on Cogito, ergo sum</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><lastBuildDate>Thu, 05 Oct 2023 19:06:00 +0800</lastBuildDate><atom:link href="https://winsphinx.github.io/blog/categories/%E6%8A%80%E6%9C%AF/index.xml" rel="self" type="application/rss+xml"/><item><title>折腾 MPD</title><link>https://winsphinx.github.io/blog/post/mpd/</link><pubDate>Thu, 05 Oct 2023 19:06:00 +0800</pubDate><guid>https://winsphinx.github.io/blog/post/mpd/</guid><description>&lt;p&gt;mpd&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;（Music Player Daemon），是一种音乐播放器守护进程，它可以在后台运行，不需要图形界面，可以通过网络或本地连接控制它。 &lt;br/&gt;&lt;/p&gt;
&lt;p&gt;mpd 支持多种音频格式，包括 MP3、FLAC、AAC、WAV 等，可以通过插件扩展其功能。mpd 可以通过各种客户端控制，如 mpc&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:2&#34;&gt;&lt;a href=&#34;#fn:2&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;、ncmpc&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:3&#34;&gt;&lt;a href=&#34;#fn:3&#34;&gt;3&lt;/a&gt;&lt;/sup&gt;、Cantata&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:4&#34;&gt;&lt;a href=&#34;#fn:4&#34;&gt;4&lt;/a&gt;&lt;/sup&gt; 等。 &lt;br/&gt;&lt;/p&gt;</description></item><item><title>LVM</title><link>https://winsphinx.github.io/blog/post/lvm/</link><pubDate>Sat, 16 Sep 2023 15:27:00 +0800</pubDate><guid>https://winsphinx.github.io/blog/post/lvm/</guid><description>&lt;p&gt;在某服务器上，我用 &lt;code&gt;fdisk -l&lt;/code&gt; 查看为硬盘容量为 3T，但用 &lt;code&gt;df&lt;/code&gt; 查看只有 200G。这是什么原因呢？ &lt;br/&gt;&lt;/p&gt;
&lt;p&gt;经分析，​&lt;code&gt;fdisk -l&lt;/code&gt; 命令显示的是硬盘分区表中的分区大小，而 &lt;code&gt;df&lt;/code&gt; 命令显示的是文件系统大小，中间还涉及了 LVM。 &lt;br/&gt;&lt;/p&gt;
&lt;p&gt;总的流程是，先用 fdisk 分区，再用 LVM 分卷，再建文件系统。 &lt;br/&gt;&lt;/p&gt;</description></item><item><title>Build Docker with Github Actions</title><link>https://winsphinx.github.io/blog/post/build-docker-with-github-actions/</link><pubDate>Sat, 12 Aug 2023 15:54:00 +0800</pubDate><guid>https://winsphinx.github.io/blog/post/build-docker-with-github-actions/</guid><description>&lt;p&gt;本文介绍两种利用 Github Actions 生成 Docker 镜像的方法。 &lt;br/&gt;&lt;/p&gt;</description></item><item><title>爬了个虫</title><link>https://winsphinx.github.io/blog/post/fetch-a-site/</link><pubDate>Thu, 13 Jul 2023 19:05:00 +0800</pubDate><guid>https://winsphinx.github.io/blog/post/fetch-a-site/</guid><description>&lt;p&gt;今天学了点 XPath 的用法，顺便爬了些图片。 &lt;br/&gt;&lt;/p&gt;</description></item><item><title>Docker</title><link>https://winsphinx.github.io/blog/post/docker/</link><pubDate>Wed, 03 May 2023 09:33:00 +0800</pubDate><guid>https://winsphinx.github.io/blog/post/docker/</guid><description>&lt;p&gt;Docker，一句话概括，将应用以及依赖打包到一个可移植的镜像中，从而实现虚拟化。 &lt;br/&gt;&lt;/p&gt;</description></item><item><title>Vagrant</title><link>https://winsphinx.github.io/blog/post/vagrant/</link><pubDate>Fri, 28 Apr 2023 18:18:00 +0800</pubDate><guid>https://winsphinx.github.io/blog/post/vagrant/</guid><description>&lt;p&gt;Vagrant，一句话概括，即快速部署虚拟机的工具。 &lt;br/&gt;&lt;/p&gt;</description></item><item><title>NextCloud</title><link>https://winsphinx.github.io/blog/post/nextcloud/</link><pubDate>Wed, 25 Jan 2023 11:52:00 +0800</pubDate><guid>https://winsphinx.github.io/blog/post/nextcloud/</guid><description>&lt;p&gt;本文介绍了如何利用 docker 安装 NextCloud。后端数据库使用的是 MariaDB。 &lt;br/&gt;&lt;/p&gt;</description></item><item><title>OpenWrt in Hyper-V</title><link>https://winsphinx.github.io/blog/post/openwrt/</link><pubDate>Fri, 11 Nov 2022 11:11:00 +0800</pubDate><guid>https://winsphinx.github.io/blog/post/openwrt/</guid><description>&lt;p&gt;OpenWrt 是一个相对 mini 的 Linux 发行版，通常作为路由器的系统。本文简单介绍在虚拟机上安装 OpenWrt。 &lt;br/&gt;&lt;/p&gt;</description></item><item><title>使用 Python 操作 Excel 文件（又一篇）</title><link>https://winsphinx.github.io/blog/post/using-python-to-deal-excel-files-another/</link><pubDate>Thu, 22 Sep 2022 22:22:00 +0800</pubDate><guid>https://winsphinx.github.io/blog/post/using-python-to-deal-excel-files-another/</guid><description>&lt;p&gt;在&lt;a href=&#34;https://winsphinx.github.io/blog/post/using-python-to-deal-excel-files/&#34;&gt;上一篇&lt;/a&gt;中，使用了 xlrd、xlwt 两个库 的组合来操作 Excel 文件，但有几个缺点： &lt;br/&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;虽然 xlrd 可以读 xls 和 xlsx，但 xlwt 只能写 xls； &lt;br/&gt;&lt;/li&gt;
&lt;li&gt;xlwt 不能在原文件上修改，需要额外借助 xlutils。 &lt;br/&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;今天发现一个更好的库 &lt;code&gt;xlwings&lt;/code&gt;​，正好弥补了上述两个缺陷。 &lt;br/&gt;&lt;/p&gt;</description></item><item><title>使用 Python 操作 Excel 文件</title><link>https://winsphinx.github.io/blog/post/using-python-to-deal-excel-files/</link><pubDate>Sun, 28 Aug 2022 13:46:00 +0800</pubDate><guid>https://winsphinx.github.io/blog/post/using-python-to-deal-excel-files/</guid><description>&lt;p&gt;使用 Python 来处理 Excel 文件中的数据，主要会用到 pandas。而处理 Excel 文件本身，则用到 xlrd 和 xlwt，以及 xlutils 这几个库。 &lt;br/&gt;&lt;/p&gt;</description></item><item><title>IPv6</title><link>https://winsphinx.github.io/blog/post/ipv6/</link><pubDate>Wed, 13 Jul 2022 18:33:00 +0800</pubDate><guid>https://winsphinx.github.io/blog/post/ipv6/</guid><description>&lt;p&gt;本文简单介绍 IPv6 的地址格式。 &lt;br/&gt;&lt;/p&gt;</description></item><item><title>Learning Hy</title><link>https://winsphinx.github.io/blog/post/learning-hy/</link><pubDate>Sat, 23 Oct 2021 18:57:00 +0800</pubDate><guid>https://winsphinx.github.io/blog/post/learning-hy/</guid><description>&lt;p&gt;Hy is a lisp dialect built on top of python. This is achieved by converting hy code to python’s abstract syntax tree (ast). This allows hy to call native python code or python to call native hy code as well.&lt;/p&gt;</description></item><item><title>Spacemace Keys</title><link>https://winsphinx.github.io/blog/post/spacemace-keys/</link><pubDate>Thu, 23 Sep 2021 19:10:00 +0800</pubDate><guid>https://winsphinx.github.io/blog/post/spacemace-keys/</guid><description>&lt;p&gt;整理了 Spacemacs 的一些常用键。 &lt;br/&gt;&lt;/p&gt;</description></item><item><title>Selenium 笔记</title><link>https://winsphinx.github.io/blog/post/selenium-notes/</link><pubDate>Fri, 20 Aug 2021 18:41:00 +0800</pubDate><guid>https://winsphinx.github.io/blog/post/selenium-notes/</guid><description>&lt;p&gt;Selenium 可以根据我们的指令，让浏览器自动加载页面，获取需要的数据，实现自动化操作。 &lt;br/&gt;&lt;/p&gt;</description></item><item><title>三阶魔方步骤</title><link>https://winsphinx.github.io/blog/post/three-order-rubik-cube-steps/</link><pubDate>Sun, 18 Jul 2021 19:12:00 +0800</pubDate><guid>https://winsphinx.github.io/blog/post/three-order-rubik-cube-steps/</guid><description>&lt;p&gt;首先介绍一下本文中用到的定义：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;根据国际标准，白色的对面是黄色；&lt;/li&gt;
&lt;li&gt;中心块，只有一种颜色；&lt;/li&gt;
&lt;li&gt;棱块，两种颜色；&lt;/li&gt;
&lt;li&gt;角块，三种颜色；&lt;/li&gt;
&lt;li&gt;六个面，分别的是顶面、底面、左面、右面、正面、背面；&lt;/li&gt;
&lt;li&gt;横向的称为层，顶层、中层、底层；&lt;/li&gt;
&lt;li&gt;纵向的称为列，左列，中列、右列；&lt;/li&gt;
&lt;li&gt;一次右手操作：上左下右（右列上翻、顶层左转、右列下翻，顶层右转）&lt;/li&gt;
&lt;li&gt;一次左手操作：上右下左（左列上翻、顶层右转、左列下翻、顶部左转）&lt;/li&gt;
&lt;/ul&gt;</description></item><item><title>Automatically Creating PDF from LaTeX with Github Actions</title><link>https://winsphinx.github.io/blog/post/automatically-creating-pdf-from-latex-with-github-actions/</link><pubDate>Mon, 12 Apr 2021 18:02:00 +0800</pubDate><guid>https://winsphinx.github.io/blog/post/automatically-creating-pdf-from-latex-with-github-actions/</guid><description>&lt;p&gt;自从体验了 Github Actions，感觉非常好用。之前介绍过使用 Appveyor 来生成 PDF&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;，现在介绍下使用 Github Actions 来生成 PDF，并发布到 release 的步骤。&lt;/p&gt;</description></item><item><title>Using pmdaria to Forecast COVID-19</title><link>https://winsphinx.github.io/blog/post/using-pmdaria-to-forecast-covid-19/</link><pubDate>Tue, 06 Apr 2021 19:38:00 +0800</pubDate><guid>https://winsphinx.github.io/blog/post/using-pmdaria-to-forecast-covid-19/</guid><description>&lt;p&gt;之前写过两篇&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:2&#34;&gt;&lt;a href=&#34;#fn:2&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;预测 COVID-19 的方法，这次用个“偷懒”的办法，直接采用 pmdaria 来自动调整参数，用来预测分析。&lt;/p&gt;
&lt;p&gt;这次的特色是，利用 Github Actions 来定时自动运行脚本，达到&lt;a href=&#34;https://github.com/winsphinx/covid&#34;&gt;每日更新&lt;/a&gt;的目的。&lt;/p&gt;</description></item><item><title>Aria2</title><link>https://winsphinx.github.io/blog/post/aria2/</link><pubDate>Wed, 17 Mar 2021 20:16:00 +0800</pubDate><guid>https://winsphinx.github.io/blog/post/aria2/</guid><description>&lt;blockquote&gt;
&lt;p&gt;aria2 是一个自由、开源、轻量级多协议和多源的命令行下载工具。它支持 HTTP/HTTPS、FTP、SFTP、 BitTorrent 和 Metalink 协议。aria2 可以通过内建的 JSON-RPC 和 XML-RPC 接口来操纵。 &lt;br/&gt;&lt;/p&gt;
&lt;/blockquote&gt;</description></item><item><title>配置打印机</title><link>https://winsphinx.github.io/blog/post/configure-printer/</link><pubDate>Tue, 16 Feb 2021 18:21:00 +0800</pubDate><guid>https://winsphinx.github.io/blog/post/configure-printer/</guid><description>&lt;p&gt;入手了一台 REDMI AX6 路由器后，突然发现，现在换个路由器不仅仅需要配置路由器本身，还有一系列的设备都需要重新配置。 &lt;br/&gt;&lt;/p&gt;</description></item><item><title>Emacs 多点编辑</title><link>https://winsphinx.github.io/blog/post/emacs-multiple-cursors-edit/</link><pubDate>Mon, 08 Feb 2021 17:59:00 +0800</pubDate><guid>https://winsphinx.github.io/blog/post/emacs-multiple-cursors-edit/</guid><description>&lt;p&gt;Emacs 可以方便地对单文件实现多点编辑，也可以对多个文件同时多点编辑。 &lt;br/&gt;&lt;/p&gt;</description></item></channel></rss>